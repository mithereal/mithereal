name: generate animation

on:
  # run automatically every 6 hours
  schedule:
    - cron: "0 */8 * * *"
  
  # allows to manually run the job at any time
  workflow_dispatch:
  
  # run on every push on the master branch
  push:
    branches:
      - master



jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      # generates a snake game from a github user (<github_user_name>) contributions graph, output a svg animation at <svg_out_path>
      - name: generate github-contribution-grid-snake.svg
        uses: Platane/snk/svg-only@v2
        with:
          github_user_name: ${{ github.repository_owner }}
          outputs: |
            dist/github-contribution-grid-snake.svg
            dist/github-contribution-grid-snake-dark.svg?palette=github-dark

      # push the content of <build_dir> to a branch
      # the content will be available at https://raw.githubusercontent.com/<github_user>/<repository>/<target_branch>/<file> , or as github page
      - name: push github-contribution-grid-snake.svg to the output branch
        uses: crazy-max/ghaction-github-pages@v2.6.0
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🦑 Medias
        if: ${{ success() || failure() }}
        uses: mithereal/metrics@latest
        with:
          filename: medias.svg
          token: ${{ secrets.TOKEN }}
          base: ""
          config_order: anilist, music
          output_action: gist
          committer_gist: ${{ secrets.GIST }}
          plugin_anilist: yes
          plugin_anilist_medias: anime
          plugin_anilist_sections: favorites, characters
          plugin_anilist_limit: 2
          plugin_anilist_limit_characters: 22
          plugin_music: yes
          plugin_music_playlist: ${{ secrets.PLAYLIST }}
          plugin_music_limit: 9

      - name: 🦑 Achievements
        if: ${{ success() || failure() }}
        uses: mithereal/metrics@latest
        with:
          filename: achievements.svg
          token: ${{ secrets.TOKEN }}
          base: ""
          output_action: gist
          committer_gist: ${{ secrets.GIST }}
          plugin_achievements: yes
          plugin_achievements_display: compact
          plugin_fortune: yes

      - name: 🦑 Sponsors
        if: ${{ success() || failure() }}
        uses: mithereal/metrics@latest
        with:
          filename: sponsors.svg
          token: ${{ secrets.TOKEN }}
          base: ""
          output_action: gist
          committer_gist: ${{ secrets.GIST }}
          plugin_sponsors: yes
          plugin_sponsors_past: yes

      - name: 🦑 General
        if: ${{ success() || failure() }}
        uses: mithereal/metrics@latest
        with:
          filename: general.svg
          token: ${{ secrets.TOKEN }}
          base: header
          base_indepth: yes
          config_order: base.header, isocalendar, languages, notable, discussions, topics
          output_action: gist
          committer_gist: ${{ secrets.GIST }}
          plugin_isocalendar: yes
          plugin_languages: yes
          plugin_languages_ignored: html, css, tex, less, dockerfile, makefile, qmake, lex, cmake, shell, gnuplot, vue, scala, c, c++, python, ejs
          plugin_languages_details: lines, bytes-size, percentage
          plugin_languages_sections: most-used, recently-used
          plugin_languages_indepth: yes
          plugin_languages_limit: 2
          plugin_topics: yes
          plugin_topics_limit: 0
          plugin_topics_mode: icons
          plugin_notable: yes
          plugin_discussions: yes
